ZXDev
=====

ZXDev - это мощная подсистема для кроссразработки на Обероне-2 для компьютера
Sinlair ZX Spectrum. Основана на оптимизирующем компиляторе высокого класса SDCC.
Пожалуй, это лучший по качеству кодогенерации компилятор Си для процессора Z80.

Назначение: быстрое средство разработки игр и программ для тех, кто не знает
или не хочет использовать ассемблер Z80, но хочет писать продвинутые игры
для ZX Spectrum, а впоследствии и для других платформ (с единого исходника).
(c) Andrew771

- Поддержана плоская модель памяти Sinclair ZX Spectrum с 48Kb.
- Реализована эффективная оптимизирующая кодогенерация (средствами SDCC).

Доступные библиотеки
====================

- Libs/Basic.odc - Sinclair ZX Spectrum Basic for Ofront/SDCC
- Libs/Laser.odc - Laser Basic for Ofront/SDCC

Быстрый старт
=============

Скачать: https://github.com/Oleg-N-Cher/BB-XDev/zipball/master
Контроль версий: https://github.com/Oleg-N-Cher/BB-XDev
Документация: ZXDev/Docu

Файлы .odc - это Oberon DoCument, открываются в программе BlackBox.exe,
можете ассоциировать их с ней.

HelloWorld
----------
1. Запустить BlackBox.exe
2. File -> Open -> ZXDev/Mod/HelloWorld.odc
3. Компилим: F11
4. Линкуем: ZXDev/HelloWorld.bat

Если размер бинарника в 2.2 Кб кажется слишком большим, то учтите, что в качестве
процедур для вывода текста используются подпрограммы не из ПЗУ, а свои, ускоренные.
Надо ещё посмотреть в направлении уменьшения целевого бинарника. Думаю, это возможно.

LaserDemo
---------
1. Запустить BlackBox.exe
2. File -> Open -> ZXDev/Mod/LaserDemo.odc
3. Компилим: F11
4. Линкуем: ZXDev/LaserDemo.bat

Если размер бинарника в 13,2 Кб кажется слишком большим, то учтите, что в кодовый блок
включается ВСЯ библиотека Laser, однако есть идея как включать из неё только самые
необходимые фрагменты (Если хотите проделать такую работу, свяжитесь со мной).
Также учтите, что в код включены ВСЕ спрайты из пакета ZXDev/Libs/Laser/SPRITE2B.
Разумеется, здесь тоже можно включить только необходимые, выбросив неиспользуемые.

Полезные горячие клавиши в системе BlackBox
===========================================

(для тех, кому надо быстро)

F11
---
Транслировать текущий открытый в редакторе модуль с помощью подсистемы Ofront
с языка Оберон-2 в текст программы на Си.

F12
---
Компилировать текущий открытый в редакторе модуль с помощью подсистемы Dev
с языка Оберон-2/Компонентный Паскаль в кодовый Оберон-файл .ocf и символьный
файл .osf, выгрузить данный модуль из памяти (если загружен и если это возможно).

Ctrl+D
------
Показать клиентский интерфейс (аналог *.h в Си) выделенного модуля.
Выделите мышкой (или клавишами <-- и --> с Shift) имя модуля и нажмите Ctrl+D
( Работает только для модулей, скомпилированных подсистемой Dev ).

F9
--
Сравнить два открытых файла на предмет различий (подсвечиваются).

Сделать выделенный фрагмент текста форматированием как другой текст
-------------------------------------------------------------------
Выделить текст, нажать Alt и тащить мышку на новое форматирование.

Благодарности
=============

Евгению Михайлову (HVG) и Игорю Мазнице (Raydac) за разработку и распространение
декомпилированной командой Raydac Soft'93 A.G. библиотеки Laser Basic.

Известные проблемы
==================

0. Пример LaserDemo сейчас сбрасывается после исполнения, надо поискать почему.



2. Сейчас исполнение программы начинается с самой первой процедуры, объявленной
   в линкуемом как основной модуле (или с самого начала модуля, короче говоря).
   Данное ограничение вызвано тем, что не используется сишная функция main().

   Обходить предлагаю так. Вынесите стартовую точку программы в отдельный модуль
   и расположите её между BEGIN и END основного стартуемого модуля. Если такой
   вариант по каким-либо причинам нежелателен, примите стартовой точкой первую
   процедуру линкуемого как главный модуля, со всеми вытекающими.

3. SDCC пока не умеет компилить вот такой код присвоения структур:
   http://sourceforge.net/tracker/?func=detail&atid=350599&aid=3452891&group_id=599
   А Ofront такой код создаёт. Обещают в SDCC фичу эту добавить. Даже приоритет
   повысили несколько раз. Здесь видится несколько решений. В порядке повышения
   сложности где-то так:

   a) не использовать присваивания вида:

   TYPE
     Card = RECORD suit*, rank*: INTEGER END;
   VAR
     a, b: Card;
   BEGIN
     a := b;

   Обойдясь таким поэлементным присваиванием:

     a.suit := b.suit; a.rank := b.rank;

   b) использовать автоматическую обработку промежуточного Си-файла, заменив в нём
      подходящим инструментом указанные присваивания “a := b” на
      “a.suit := b.suit; a.rank := b.rank”
      Это решение не очень красивое, но плюс: Оберон-исходник остаётся красивым.

   c) ждать пока в SDCC добавят нужную нам рюху (ещё пока не добавили):
      http://sourceforge.net/tracker/index.php?func=detail&aid=1710546&group_id=599&atid=350599


   d) наиболее правильным видится доработать Ofront, чтобы сам генерировал
      поэлементное присваивание записей (или что-то вроде memcpy(a, b, sizeof(Card)) )
      [опционально включаемое]. Это вполне возможно, правда, я не понял, разрешает ли
      лицензия его доработку. Надо уточнить у Джозефа Темпла.

TODO
====

- Сейчас в библиотеке Basic поддержан только режим DI. Планируется добавить
    поддержку режимов IM0 и IM2. Реализовать режим IM0 стало возможно благодаря
    применению ключа SDCC --reserve-regs-iy, который запрещает компилятору
    использовать регистр IY).
- Разобраться с файлом Ofront.par
- Добавить сжатие целевого бинарника упаковщиком Hrust 1.3
- Добавить подсистему для автоматической подсветки синтаксиса модулей:
  (Начать отсюда: http://forum.oberoncore.ru/viewtopic.php?f=114&t=3864 )

Сейчас раскрашиваю синтаксис так
================================

notepad++ (со схемой Pascal)
Дополнения -> NppExport -> Copy RTF to clipboard
Вставить в BlackBox раскрашенный текст Ctrl+V
Дораскрашивать путём перетаскивания с Alt выделенного текста
на текст с нужным форматированием.

Рекомендуемые соглашения
========================

Типы, Процедуры, Константы - называем с большой буквы; переменные - с маленькой буквы;
процедурные переменные - с маленькой буквы, даже если они являются параметрами или полями записи.
Их и так видно, что они процедуры, когда их вызываешь, – по скобкам.
Переменная – значит с маленькой буквы, всё остальное с большой. Вот моё правило. (с) Алекс Ильин

Точку с запятой ";" ставим после END всегда, за исключением случаев:
a) обязательно не ставим ";" после RETURN (если дальше END) и после EXIT (если дальше END);
b) не ставим ";" перед END если конструкция уместилась в одну строку:
   IF a = b THEN a := 2 END; (* <-- Такое системе контроля версий не страшно. *)

Обоснование: http://forum.oberoncore.ru/viewtopic.php?f=29&t=3892

Ассемблерные команды в сишных обвязках всегда пишем БОЛЬШИМИ буквами -
дань традиции старых 8-битных компов, в которых поначалу даже не было строчных литер,
а также классике спектрумных книг, в которых также придерживаются данного соглашения
(см. листинги в книге "Как написать игру на ассемблере для ZX Spectrum", например).

Если пожелаете добавить к проекту ZXDev свои разработки, следование данным соглашениям обязательно.

Отладка
=======

Я использую для отладки ASSERT'ы, и debug-вставки с отладочной распечаткой.

-------------------------------------------------------------------------------------
MODULE Sets; (* portable *)

CONST
  Debug* = TRUE;

END Sets.

MODULE Grx; (* portable *)
IMPORT Sets, Debug;
...

PROCEDURE PutSprite* (x, y: SpriteCoords; spr: Sprite);
BEGIN
  IF Sets.Debug THEN (* Это прямой аналог ifdef'а, однако если Debug = FALSE,
                        то никакого лишнего кода в прогу не вставится *)
    CASE x OF 0..MaxX: CASE y OF 0..MaxY: ELSE Debug.Stop("Bad sprite coords!") END END;
  END;
  ...
END PutSprite;

END Grx.
-------------------------------------------------------------------------------------

Для профилирования использую эмулятор FUSE. В качестве пошагового отладчика –
эмулятор Владимира Кладова EmuZWin. Так и баги в кодогенераторе SDCC искал,
так и свои проги дебажил. Я также не против иметь готовый пошаговый отладчик
Оберон-программ чисто для Z80. Осталось его написать.

Предполагаемые направления дальнейшей деятельности
==================================================

1. Адаптация к технологии  ZXDev библиотек MegaBasic, Supercode, Supercode 2 и New Supercode.
2. Адаптация к ZXDev библиотеки Sprite Pack из Z88DK ( http://www.timexsinclair.org/alvin/#SP , http://www.mojontwins.com/warehouse/splib2-tutorial.pdf ).
3. Адаптация к ZXDev наработок SerzhSoft’а, в частности, “40 лучших процедур” ( http://vladik1232008.narod.ru/ZX_FORUM_40_Best_procedures.html , http://vladik1232008.narod.ru/ZX_Review11_12.html )
4. Портирование с Hisoft Pascal библиотеки для черепашьей графики Turtle.
5. Адаптация к ZXDev процедуры NiceType (красивый вывод текста) с моей игры Sea Fight  ( http://colossoft.anarxi.st/?go=seafight ).
6. Порт игры “Бега Мышей” (из книги “Как написать игру для ZX Spectrum”) с Laser Basic на Оберон-2 (в качестве демонстрации технологии ZXDev).
7. Порт игры Laser Cube с Laser Basic на Оберон-2 с целью её ускорения.
8. Порт игры Dark Woods для ZX Spectrum ( http://zx.pk.ru/showthread.php?t=18457 ).

Следует предпринять и такие шаги:

1. Доработка Офронта для решения этой проблемы: ( http://sourceforge.net/tracker/?func=detail&atid=350599&aid=3452891&group_id=599 ).
2. Доработка Ofront до возможности полноценно использовать линейку беззнаковых типов в программах на Обероне – SHORTCARD (8 бит), CARDINAL (16 бит), LONGCARD (32 бита), что важно для оптимальности алгоритмов при разворачивании кода на процессор Z80. Название типов исходит из языка Модула-2, но обсуждаемо.
3. Разработка быстрой графической библиотеки для ZX Spectrum (оконное GUI, шрифты разных размеров, заливка текстурой, спрайты, тайлы, векторная графика с масштабированием). Создание аналогичной по функционалу и по вызовам библиотеки для других платформ (для облегчения переноса игр со Спектрума и для одномоментной разработки для Спектрума и чего-то ещё).
4. Совершенствование подсистемы ZXDev для упрощения разработки (чтобы новичкам легче было создавать на Обероне программы для ZX Spectrum), наращивание её возможностей новыми библиотеками и насыщение идеями, создание информационного пространства в рамках технологии “ZX+Oberon”.
5. Дальнейшая доработка Офронта до транслятора, включающая поддержку языка Component Pascal, с возможностью использовать язык КП для программирования процессора Z80.

Я не собираюсь реализовывать всё вышеперечисленное сам, всего на свете не сделаешь, поэтому будем посмотреть, какой это вызовет интерес и одобрение у вас. Также буду рад услышать мнения, какие пункты считаете более приоритетными.

Лицензия
========

Подсистему ZXDev разрешается использовать для любых коммерческих или некоммерческих
применений свободно. Любая помощь в работе, даже мельчайшая, будет очень кстати.
Учитывайте, что сам Ofront разрешено использовать безплатно только в некоммерческих
целях. А он - достаточно важная часть системы XDev.

Авторские права
===============

Сборка XDev и подсистема ZXDev - VEDANTA software - Oleg N. Cher
  ( http://zx.oberon2.ru  ICQ 2-20-84-03  allot -bk- ru )

BlackBox Component Builder - Oberon microsystems AG - www.oberon.ch

Пакет русской документации для BlackBox 1.6 - проект ИНФОРМАТИКА-21

Ofront - Software Templ OG - www.software-templ.com

Small Device C Compiler - SDCC Team - http://sdcc.sourceforge.net/
Laser Basic for ZX Spectrum - Oasis, Ocean, Michailov (HVG) -
  ( http://zx.pk.ru/showthread.php?t=11615 )

PC110 Micro C (+Laser Basic lib) - Raydac Soft'93 A.G. (I.Maznitsa, E.Michailov)

BIN2TRD - Copper Feet '1999 (V.Mednonogov)

HEX2BIN - Rockwell Automation (Jacques Pelletier)

StripBIN - VEDANTA software - Oleg N. Cher

Win_TZX2TAP - Leszek Chmielewski - http://www.worldofspectrum.org/utilities.html
